// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.com.android.application)
    alias(libs.plugins.org.jetbrains.kotlin.android)
    alias(libs.plugins.com.android.library) apply false
    alias(libs.plugins.compose.compiler)
    id("com.mikepenz.aboutlibraries.plugin") version "11.2.2"
    alias(libs.plugins.kotlin.ksp)
}


android {
    compileSdk  = libs.versions.compileSdk.get().toInteger()
    namespace "com.android.messaging"
    defaultConfig {
        applicationId "com.android.messaging"
        minSdkVersion 21
        targetSdkVersion libs.versions.targetSdk.get().toString()
        versionCode = getMyVersionCode()
        versionName = getMyVersionName()
        multiDexEnabled = true
        vectorDrawables {
            useSupportLibrary true
        }
    }
    sourceSets {
            main {
                manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src'] // NOTE: this includes external/ex/common/java!
                resources.srcDirs = ['src']
                aidl.srcDirs = ['src']
                renderscript.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = ['assets']
                jniLibs.srcDirs = ['jni']
        }
    }
    externalNativeBuild {
        cmake {
            path "jni/CMakeLists.txt"
        }
    }
    ndkVersion '26.2.11394342'
    signingConfigs {
        aosp {
            // Generated from the AOSP platform key:
            // https://android.googlesource.com/platform/build/+/refs/tags/android-11.0.0_r29/target/product/security/platform.pk8
            keyAlias "platform"
            keyPassword "platform"
            storeFile file("platform.jks")
            storePassword "platform"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.aosp
        }
        debug {
            signingConfig signingConfigs.aosp
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose = true
        viewBinding = true
    }
    viewBinding {
        enabled = true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    lint {
        abortOnError false
    }
}

dependencies {
    implementation(project(':external:common'))
    implementation(project(':external:commonframesequence'))
    implementation(project(':external:vcard'))
    implementation(project(':external:chips'))
    implementation(project(':external:photoviewer'))
    implementation(project(':external:colorpicker'))

    implementation(platform(libs.kotlin.bom))

    implementation(libs.androidx.multidex)
    implementation(libs.androidx.preference)
    implementation(libs.androidx.annotation)
    implementation(libs.core.ktx)
    implementation(libs.androidx.media)
    implementation(libs.androidx.fragment.ktx)
//    implementation libs.androidx.legacy.support.core.utils
//    implementation libs.androidx.legacy.support.core.ui
//    implementation libs.androidx.fragment
//    implementation libs.androidx.legacy.support.v13
//    api (libs.material)
    implementation(libs.appcompat)
    implementation(libs.androidx.palette)
    implementation(libs.androidx.recyclerview)
    implementation(libs.androidx.exifinterface)

    implementation(libs.androidx.room.runtime)
    implementation(libs.material)
    ksp(libs.androidx.room.compiler)
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation(libs.androidx.room.ktx)

    implementation(libs.activity.compose)

    implementation(platform(libs.compose.bom))
    implementation(libs.ui)
    implementation(libs.ui.graphics)
    implementation(libs.ui.tooling.preview)
    implementation(libs.ui.viewbinding)
    implementation(libs.androidx.material)
    implementation(libs.ui.material3)
    implementation(libs.ui.material.icons.extended)
    implementation(libs.ui.material.icons.extended.android)
    debugImplementation(libs.ui.tooling)
    debugImplementation(libs.ui.test.manifest)
    androidTestImplementation(platform(libs.compose.bom))
    androidTestImplementation(libs.ui.test.junit4)

    implementation(libs.accompanist.themeadapter.appcompat)
    implementation(libs.accompanist.themeadapter.material3)

    implementation(libs.androidx.navigation.compose)

    implementation(libs.lifecycle.runtime.ktx)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.lifecycle.extensions)
    implementation(libs.androidx.lifecycle.viewmodel.compose)
    implementation(libs.androidx.lifecycle.runtime.compose)

    implementation(libs.androidx.work.runtime.ktx)


    implementation(libs.material3.preference)
// Alternative Material3 based module
    api(libs.aboutlibraries.compose)

    implementation libs.compose.settings.ui.m3
    implementation libs.compose.settings.storage.preferences

    // Kotlin coroutines
    implementation(libs.copper.flow)

    api libs.guava
    api libs.libphonenumber
    api libs.geocoder
    api libs.prefixmapper
    api libs.carrier


}

String getMyVersionName() {
    def stdout = new ByteArrayOutputStream()
    if (rootProject.file("gradlew").exists())
        exec { commandLine 'git', 'describe', '--tags', '--always', '--dirty'
            standardOutput = stdout }
    else // automatic build system, don't tag dirty
        exec { commandLine 'git', 'describe', '--tags', '--always'; standardOutput = stdout }
    return stdout.toString().trim().substring(1)
}

int getMyVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--count', "HEAD"
        standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim())
}


